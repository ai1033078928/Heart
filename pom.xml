<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                      http://maven.apache.org/maven-v4_0_0.xsd">

    <!-- 模型版本。 -->
    <modelVersion>4.0.0</modelVersion>

    <!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.winner.trade，maven会将该项目打成的jar包放本地路径：/com/winner/trade -->
    <groupId>groupId</groupId>
    <!-- 本项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 -->
    <artifactId>heart</artifactId>
    <!-- 本项目目前所处的版本号 -->
    <version>1.0-SNAPSHOT</version>
    <!-- 打包的机制，如pom,jar, maven-plugin, ejb, war, ear, rar, par，默认为jar -->
    <packaging>pom</packaging>

    <modules>
        <module>_001.leetcode</module>
        <module>_002.designpattern</module>
        <module>_003.baseutil_usage</module>
        <module>_101.apache_utils</module>
        <module>_102.hutool_utils</module>
        <module>_103.sqlparser_utils</module>
        <module>_104.databases_utils</module>
        <module>_201.zip2db</module>
        <module>_302.cdc-lab</module>
        <module>_303.hive_functions</module>
        <module>_304.flink_demo</module>
        <module>_305.spark_demo</module>
    </modules>

    <!-- 为pom定义一些常量，在pom中的其它地方可以直接引用 使用方式 如下 ：${file.encoding} -->
    <properties>
        <file.encoding>UTF-8</file.encoding>
        <java.source.version>1.8</java.source.version>
        <java.target.version>1.8</java.target.version>

        <junit.version>4.13.1</junit.version>

        <alibaba.easyexcel>3.0.5</alibaba.easyexcel>
        <alibaba.fastjson>1.2.75</alibaba.fastjson>
        <alibaba.druid>1.1.19</alibaba.druid>
        <slf4j.api>2.0.9</slf4j.api>
        <log4j-to-slf4j.version>2.14.0</log4j-to-slf4j.version>
        <slf4j-log4j12.version>2.0.6</slf4j-log4j12.version>

        <google.guava>20.0</google.guava>

        <apache.lang3>3.1</apache.lang3>
        <apache.io>2.11.0</apache.io>
        <apache.csv>1.9.0</apache.csv>
        <apache.commons.cli>1.5.0</apache.commons.cli>
        <apache.poi>5.2.2</apache.poi>  <!--xls(03)-->
        <apache.poi.ooxml>5.2.2</apache.poi.ooxml>  <!--xlsx(07)-->

        <hutool.version>5.8.23</hutool.version>
        <mail.version>1.6.2</mail.version>
        <qrcode.version>3.4.1</qrcode.version>
        <bouncycastle.version>1.70</bouncycastle.version>  <!--国密算法工具-SmUtil-->
        <itextpdf.version>8.0.2</itextpdf.version>  <!-- pdf依赖 -->

        <mybatis.version>3.5.4</mybatis.version>
        <mysql.version>8.0.28</mysql.version>
        <ojdbc6.version>11.2.0.3</ojdbc6.version>
        <sqlite.version>3.36.0.3</sqlite.version>
        <jedis.version>2.9.0</jedis.version>
        <dmjdbc.version>8.1.3.73</dmjdbc.version>

        <!-- 其他 -->
        <jsqlparser.version>4.3</jsqlparser.version>  <!-- sql格式化 -->
        <opencsv.version>5.9</opencsv.version>
        <lombok.version>1.18.38</lombok.version>
        <ip2region.version>2.7.0</ip2region.version>
        <!--<spring.security>2.7.0</spring.security>-->

        <!-- bigdata依赖 -->
        <hadoop.version>2.9.2</hadoop.version>
        <hive.version>2.3.6</hive.version>
        <scala.binary.version>2.12</scala.binary.version>
        <spark.version>3.4.3</spark.version>
        <flink.version>1.20.0</flink.version>
        <!--<flinkcdc.version>3.3.0</flinkcdc.version>-->
        <flink-connector.version>3.3.0-1.20</flink-connector.version>  <!-- 连接器 -->
        <flink-mysql-cdc.version>3.0.1</flink-mysql-cdc.version>  <!-- mysqlcdc连接器 -->
        <!-- 分布式缓存？ -->
        <!--<version.infinispan>13.0.17.Final</version.infinispan>
        <version.infinispan.protostream>4.4.4.Final</version.infinispan.protostream>-->


        <quartz.version>2.3.2</quartz.version>
    </properties>


    <dependencies>

        <!--单元测试-->
        <!-- https://mvnrepository.com/artifact/junit/junit -->
        <!--<dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            &lt;!&ndash; maven认为，程序对外部的依赖会随着程序的所处阶段和应用场景而变化，所以maven中的依赖关系有作用域(scope)的限制。 &ndash;&gt;
            &lt;!&ndash;scope包含如下的取值：compile（编译范围）、provided（已提供范围）、runtime（运行时范围）、test（测试范围）、system（系统范围） &ndash;&gt;
            <scope>test</scope>
        </dependency>-->


        <!--mysql 5.x 连接依赖-->
        <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
        <!--<dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>${mysql.version}</version>
        </dependency>-->

    </dependencies>


    <build>
        <!-- finalName指定打包生成的文件名，默认为工程名-版本号 -->
        <finalName>heart</finalName>

        <plugins>
            <!-- 指定jdk版本 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <!-- 源码的编译器版本 -->
                    <source>${java.source.version}</source>
                    <!-- class的编译器版本 -->
                    <target>${java.target.version}</target>
                </configuration>
            </plugin>

            <!--单元测试插件  -->
            <!--<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.0.0-M1</version>
                <configuration>
                    <parallel>methods</parallel>
                    <threadCount>10</threadCount>
                    &lt;!&ndash; 跳过测试 &ndash;&gt;
                    <skip>true</skip>
                </configuration>
            </plugin>-->

        </plugins>
    </build>
</project>